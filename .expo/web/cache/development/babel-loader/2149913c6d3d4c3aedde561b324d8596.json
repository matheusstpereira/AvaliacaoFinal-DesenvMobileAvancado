{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"type\", \"pictureSize\", \"poster\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CodedError } from 'expo-modules-core';\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport createElement from 'react-native-web/dist/exports/createElement';\nimport { CameraType } from \"./Camera.types\";\nimport CameraManager from \"./ExponentCameraManager.web\";\nimport { capture } from \"./WebCameraUtils\";\nimport { PictureSizes } from \"./WebConstants\";\nimport { useWebCameraStream } from \"./useWebCameraStream\";\nimport { useWebQRScanner } from \"./useWebQRScanner\";\nvar ExponentCamera = React.forwardRef(function (_ref, ref) {\n  var _props$barCodeScanner3, _props$barCodeScanner4;\n  var type = _ref.type,\n    pictureSize = _ref.pictureSize,\n    poster = _ref.poster,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var video = React.useRef(null);\n  var native = useWebCameraStream(video, type, props, {\n    onCameraReady: function onCameraReady() {\n      if (props.onCameraReady) {\n        props.onCameraReady();\n      }\n    },\n    onMountError: props.onMountError\n  });\n  var isQRScannerEnabled = React.useMemo(function () {\n    var _props$barCodeScanner, _props$barCodeScanner2;\n    return !!((_props$barCodeScanner = props.barCodeScannerSettings) != null && (_props$barCodeScanner2 = _props$barCodeScanner.barCodeTypes) != null && _props$barCodeScanner2.includes('qr') && !!props.onBarCodeScanned);\n  }, [(_props$barCodeScanner3 = props.barCodeScannerSettings) == null ? void 0 : _props$barCodeScanner3.barCodeTypes, props.onBarCodeScanned]);\n  useWebQRScanner(video, {\n    interval: (_props$barCodeScanner4 = props.barCodeScannerSettings) == null ? void 0 : _props$barCodeScanner4.interval,\n    isEnabled: isQRScannerEnabled,\n    captureOptions: {\n      scale: 1,\n      isImageMirror: native.type === CameraType.front\n    },\n    onScanned: function onScanned(event) {\n      if (props.onBarCodeScanned) {\n        props.onBarCodeScanned(event);\n      }\n    }\n  });\n  React.useImperativeHandle(ref, function () {\n    return {\n      getAvailablePictureSizes: function getAvailablePictureSizes(ratio) {\n        return function _callee() {\n          return _regeneratorRuntime.async(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  return _context.abrupt(\"return\", PictureSizes);\n                case 1:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, null, null, null, Promise);\n        }();\n      },\n      takePicture: function takePicture(options) {\n        return function _callee2() {\n          var _video$current, _video$current2;\n          var settings;\n          return _regeneratorRuntime.async(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (!(!video.current || ((_video$current = video.current) == null ? void 0 : _video$current.readyState) !== ((_video$current2 = video.current) == null ? void 0 : _video$current2.HAVE_ENOUGH_DATA))) {\n                    _context2.next = 2;\n                    break;\n                  }\n                  throw new CodedError('ERR_CAMERA_NOT_READY', 'HTMLVideoElement does not have enough camera data to construct an image yet.');\n                case 2:\n                  settings = native.mediaTrackSettings;\n                  if (settings) {\n                    _context2.next = 5;\n                    break;\n                  }\n                  throw new CodedError('ERR_CAMERA_NOT_READY', 'MediaStream is not ready yet.');\n                case 5:\n                  return _context2.abrupt(\"return\", capture(video.current, settings, _objectSpread(_objectSpread({}, options), {}, {\n                    onPictureSaved: function onPictureSaved(picture) {\n                      if (options.onPictureSaved) {\n                        options.onPictureSaved(picture);\n                      }\n                      if (props.onPictureSaved) {\n                        props.onPictureSaved({\n                          nativeEvent: {\n                            data: picture,\n                            id: -1\n                          }\n                        });\n                      }\n                    }\n                  })));\n                case 6:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, null, null, null, Promise);\n        }();\n      },\n      resumePreview: function resumePreview() {\n        return function _callee3() {\n          return _regeneratorRuntime.async(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (video.current) {\n                    video.current.play();\n                  }\n                case 1:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, null, null, null, Promise);\n        }();\n      },\n      pausePreview: function pausePreview() {\n        return function _callee4() {\n          return _regeneratorRuntime.async(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  if (video.current) {\n                    video.current.pause();\n                  }\n                case 1:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, null, null, null, Promise);\n        }();\n      }\n    };\n  }, [native.mediaTrackSettings, props.onPictureSaved]);\n  var isMuted = true;\n  var style = React.useMemo(function () {\n    var isFrontFacingCamera = native.type === CameraManager.Type.front;\n    return [StyleSheet.absoluteFill, styles.video, {\n      transform: isFrontFacingCamera ? [{\n        scaleX: -1\n      }] : undefined\n    }];\n  }, [native.type]);\n  return React.createElement(View, {\n    pointerEvents: \"box-none\",\n    style: [styles.videoWrapper, props.style]\n  }, React.createElement(Video, {\n    autoPlay: true,\n    playsInline: true,\n    muted: isMuted,\n    poster: poster,\n    pointerEvents: props.pointerEvents,\n    ref: video,\n    style: style\n  }), props.children);\n});\nexport default ExponentCamera;\nvar Video = React.forwardRef(function (props, ref) {\n  return createElement('video', _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref\n  }));\n});\nvar styles = StyleSheet.create({\n  videoWrapper: {\n    flex: 1,\n    alignItems: 'stretch'\n  },\n  video: {\n    width: '100%',\n    height: '100%',\n    objectFit: 'cover'\n  }\n});","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,UAAU,QAAQ,mBAAmB;AAC9C,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC;AAAA;AAE/B,OAAOC,aAAa,MAAM,6CAA6C;AAEvE,SAIEC,UAAU;AAEZ,OAAOC,aAAa;AACpB,SAASC,OAAO;AAChB,SAASC,YAAY;AACrB,SAASC,kBAAkB;AAC3B,SAASC,eAAe;AASxB,IAAMC,cAAc,GAAGR,KAAK,CAACS,UAAU,CACrC,gBAEEC,GAAiC,EAC/B;EAAA;EAAA,IAFAC,IAAI,QAAJA,IAAI;IAAEC,WAAW,QAAXA,WAAW;IAAEC,MAAM,QAANA,MAAM;IAAKC,KAAK;EAGrC,IAAMC,KAAK,GAAGf,KAAK,CAACgB,MAAM,CAA0B,IAAI,CAAC;EAEzD,IAAMC,MAAM,GAAGX,kBAAkB,CAACS,KAAK,EAAEJ,IAAkB,EAAEG,KAAK,EAAE;IAClEI,aAAa;MACX,IAAIJ,KAAK,CAACI,aAAa,EAAE;QACvBJ,KAAK,CAACI,aAAa,EAAE;;IAEzB,CAAC;IACDC,YAAY,EAAEL,KAAK,CAACK;GACrB,CAAC;EAEF,IAAMC,kBAAkB,GAAGpB,KAAK,CAACqB,OAAO,CAAU,YAAK;IAAA;IACrD,OAAO,CAAC,EACN,8BAAK,CAACC,sBAAsB,uCAA5B,sBAA8BC,YAAY,aAA1C,uBAA4CC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAACV,KAAK,CAACW,gBAAgB,CACvF;EACH,CAAC,EAAE,2BAACX,KAAK,CAACQ,sBAAsB,qBAA5B,uBAA8BC,YAAY,EAAET,KAAK,CAACW,gBAAgB,CAAC,CAAC;EAExElB,eAAe,CAACQ,KAAK,EAAE;IACrBW,QAAQ,4BAAEZ,KAAK,CAACQ,sBAAsB,qBAA5B,uBAA8BI,QAAQ;IAChDC,SAAS,EAAEP,kBAAkB;IAC7BQ,cAAc,EAAE;MAAEC,KAAK,EAAE,CAAC;MAAEC,aAAa,EAAEb,MAAM,CAACN,IAAI,KAAKT,UAAU,CAAC6B;IAAK,CAAE;IAC7EC,SAAS,qBAACC,KAAK;MACb,IAAInB,KAAK,CAACW,gBAAgB,EAAE;QAC1BX,KAAK,CAACW,gBAAgB,CAACQ,KAAK,CAAC;;IAEjC;GAED,CAAC;EAIFjC,KAAK,CAACkC,mBAAmB,CACvBxB,GAAG,EACH;IAAA,OAAO;MACCyB,wBAAwB,oCAACC,KAAa;QAAA;UAAA;YAAA;cAAA;gBAAA;kBAAA,iCACnC/B,YAAY;gBAAA;gBAAA;kBAAA;cAAA;YAAA;UAAA;QAAA;MACrB,CAAC;MACKgC,WAAW,uBAACC,OAA6B;QAAA;UAAA;UAAA;UAAA;YAAA;cAAA;gBAAA;kBAAA,MACzC,CAACvB,KAAK,CAACwB,OAAO,IAAI,wBAAK,CAACA,OAAO,qBAAb,eAAeC,UAAU,0BAAKzB,KAAK,CAACwB,OAAO,qBAAb,gBAAeE,gBAAgB;oBAAA;oBAAA;kBAAA;kBAAA,MAC3E,IAAI1C,UAAU,CAClB,sBAAsB,EACtB,8EAA8E,CAC/E;gBAAA;kBAEG2C,QAAQ,GAAGzB,MAAM,CAAC0B,kBAAkB;kBAAA,IACrCD,QAAQ;oBAAA;oBAAA;kBAAA;kBAAA,MACL,IAAI3C,UAAU,CAAC,sBAAsB,EAAE,+BAA+B,CAAC;gBAAA;kBAAA,kCAGxEK,OAAO,CAACW,KAAK,CAACwB,OAAO,EAAEG,QAAQ,kCACjCJ,OAAO;oBAEVM,cAAc,0BAACC,OAAO;sBACpB,IAAIP,OAAO,CAACM,cAAc,EAAE;wBAC1BN,OAAO,CAACM,cAAc,CAACC,OAAO,CAAC;;sBAEjC,IAAI/B,KAAK,CAAC8B,cAAc,EAAE;wBACxB9B,KAAK,CAAC8B,cAAc,CAAC;0BAAEE,WAAW,EAAE;4BAAEC,IAAI,EAAEF,OAAO;4BAAEG,EAAE,EAAE,CAAC;0BAAC;wBAAE,CAAE,CAAC;;oBAEpE;kBAAC,GACD;gBAAA;gBAAA;kBAAA;cAAA;YAAA;UAAA;QAAA;MACJ,CAAC;MACKC,aAAa;QAAA;UAAA;YAAA;cAAA;gBAAA;kBACjB,IAAIlC,KAAK,CAACwB,OAAO,EAAE;oBACjBxB,KAAK,CAACwB,OAAO,CAACW,IAAI,EAAE;;gBACrB;gBAAA;kBAAA;cAAA;YAAA;UAAA;QAAA;MACH,CAAC;MACKC,YAAY;QAAA;UAAA;YAAA;cAAA;gBAAA;kBAChB,IAAIpC,KAAK,CAACwB,OAAO,EAAE;oBACjBxB,KAAK,CAACwB,OAAO,CAACa,KAAK,EAAE;;gBACtB;gBAAA;kBAAA;cAAA;YAAA;UAAA;QAAA;MACH;KACD;EAAA,CAAC,EACF,CAACnC,MAAM,CAAC0B,kBAAkB,EAAE7B,KAAK,CAAC8B,cAAc,CAAC,CAClD;EAID,IAAMS,OAAO,GAAG,IAAI;EAEpB,IAAMC,KAAK,GAAGtD,KAAK,CAACqB,OAAO,CAAuB,YAAK;IACrD,IAAMkC,mBAAmB,GAAGtC,MAAM,CAACN,IAAI,KAAKR,aAAa,CAACqD,IAAI,CAACzB,KAAK;IACpE,OAAO,CACL0B,UAAU,CAACC,YAAY,EACvBC,MAAM,CAAC5C,KAAK,EACZ;MAEE6C,SAAS,EAAEL,mBAAmB,GAAG,CAAC;QAAEM,MAAM,EAAE,CAAC;MAAC,CAAE,CAAC,GAAGC;KACrD,CACF;EACH,CAAC,EAAE,CAAC7C,MAAM,CAACN,IAAI,CAAC,CAAC;EAEjB,OACEX,oBAAC+D,IAAI;IAACC,aAAa,EAAC,UAAU;IAACV,KAAK,EAAE,CAACK,MAAM,CAACM,YAAY,EAAEnD,KAAK,CAACwC,KAAK;EAAC,GACtEtD,oBAACkE,KAAK;IACJC,QAAQ;IACRC,WAAW;IACXC,KAAK,EAAEhB,OAAO;IACdxC,MAAM,EAAEA,MAAM;IAEdmD,aAAa,EAAElD,KAAK,CAACkD,aAAa;IAClCtD,GAAG,EAAEK,KAAK;IACVuC,KAAK,EAAEA;EAAK,EACZ,EACDxC,KAAK,CAACwD,QAAQ,CACV;AAEX,CAAC,CACF;AAED,eAAe9D,cAAc;AAE7B,IAAM0D,KAAK,GAAGlE,KAAK,CAACS,UAAU,CAC5B,UACEK,KAKC,EACDJ,GAAgC;EAAA,OAC7BT,aAAa,CAAC,OAAO,kCAAOa,KAAK;IAAEJ,GAAG,EAAHA;EAAG,GAAG;AAAA,EAC/C;AAED,IAAMiD,MAAM,GAAGF,UAAU,CAACc,MAAM,CAAC;EAC/BN,YAAY,EAAE;IACZO,IAAI,EAAE,CAAC;IACPC,UAAU,EAAE;GACb;EACD1D,KAAK,EAAE;IACL2D,KAAK,EAAE,MAAM;IACbC,MAAM,EAAE,MAAM;IACdC,SAAS,EAAE;;CAEd,CAAC","names":["CodedError","React","createElement","CameraType","CameraManager","capture","PictureSizes","useWebCameraStream","useWebQRScanner","ExponentCamera","forwardRef","ref","type","pictureSize","poster","props","video","useRef","native","onCameraReady","onMountError","isQRScannerEnabled","useMemo","barCodeScannerSettings","barCodeTypes","includes","onBarCodeScanned","interval","isEnabled","captureOptions","scale","isImageMirror","front","onScanned","event","useImperativeHandle","getAvailablePictureSizes","ratio","takePicture","options","current","readyState","HAVE_ENOUGH_DATA","settings","mediaTrackSettings","onPictureSaved","picture","nativeEvent","data","id","resumePreview","play","pausePreview","pause","isMuted","style","isFrontFacingCamera","Type","StyleSheet","absoluteFill","styles","transform","scaleX","undefined","View","pointerEvents","videoWrapper","Video","autoPlay","playsInline","muted","children","create","flex","alignItems","width","height","objectFit"],"sourceRoot":"","sources":["../src/ExponentCamera.web.tsx"],"sourcesContent":["import { CodedError } from 'expo-modules-core';\nimport * as React from 'react';\nimport { StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\nimport createElement from 'react-native-web/dist/exports/createElement';\n\nimport {\n  CameraCapturedPicture,\n  CameraNativeProps,\n  CameraPictureOptions,\n  CameraType,\n} from './Camera.types';\nimport CameraManager from './ExponentCameraManager.web';\nimport { capture } from './WebCameraUtils';\nimport { PictureSizes } from './WebConstants';\nimport { useWebCameraStream } from './useWebCameraStream';\nimport { useWebQRScanner } from './useWebQRScanner';\n\nexport interface ExponentCameraRef {\n  getAvailablePictureSizes: (ratio: string) => Promise<string[]>;\n  takePicture: (options: CameraPictureOptions) => Promise<CameraCapturedPicture>;\n  resumePreview: () => Promise<void>;\n  pausePreview: () => Promise<void>;\n}\n\nconst ExponentCamera = React.forwardRef(\n  (\n    { type, pictureSize, poster, ...props }: CameraNativeProps & { children?: React.ReactNode },\n    ref: React.Ref<ExponentCameraRef>\n  ) => {\n    const video = React.useRef<HTMLVideoElement | null>(null);\n\n    const native = useWebCameraStream(video, type as CameraType, props, {\n      onCameraReady() {\n        if (props.onCameraReady) {\n          props.onCameraReady();\n        }\n      },\n      onMountError: props.onMountError,\n    });\n\n    const isQRScannerEnabled = React.useMemo<boolean>(() => {\n      return !!(\n        props.barCodeScannerSettings?.barCodeTypes?.includes('qr') && !!props.onBarCodeScanned\n      );\n    }, [props.barCodeScannerSettings?.barCodeTypes, props.onBarCodeScanned]);\n\n    useWebQRScanner(video, {\n      interval: props.barCodeScannerSettings?.interval,\n      isEnabled: isQRScannerEnabled,\n      captureOptions: { scale: 1, isImageMirror: native.type === CameraType.front },\n      onScanned(event) {\n        if (props.onBarCodeScanned) {\n          props.onBarCodeScanned(event);\n        }\n      },\n      // onError: props.onMountError,\n    });\n\n    // const [pause, setPaused]\n\n    React.useImperativeHandle(\n      ref,\n      () => ({\n        async getAvailablePictureSizes(ratio: string): Promise<string[]> {\n          return PictureSizes;\n        },\n        async takePicture(options: CameraPictureOptions): Promise<CameraCapturedPicture> {\n          if (!video.current || video.current?.readyState !== video.current?.HAVE_ENOUGH_DATA) {\n            throw new CodedError(\n              'ERR_CAMERA_NOT_READY',\n              'HTMLVideoElement does not have enough camera data to construct an image yet.'\n            );\n          }\n          const settings = native.mediaTrackSettings;\n          if (!settings) {\n            throw new CodedError('ERR_CAMERA_NOT_READY', 'MediaStream is not ready yet.');\n          }\n\n          return capture(video.current, settings, {\n            ...options,\n            // This will always be defined, the option gets added to a queue in the upper-level. We should replace the original so it isn't called twice.\n            onPictureSaved(picture) {\n              if (options.onPictureSaved) {\n                options.onPictureSaved(picture);\n              }\n              if (props.onPictureSaved) {\n                props.onPictureSaved({ nativeEvent: { data: picture, id: -1 } });\n              }\n            },\n          });\n        },\n        async resumePreview(): Promise<void> {\n          if (video.current) {\n            video.current.play();\n          }\n        },\n        async pausePreview(): Promise<void> {\n          if (video.current) {\n            video.current.pause();\n          }\n        },\n      }),\n      [native.mediaTrackSettings, props.onPictureSaved]\n    );\n\n    // TODO(Bacon): Create a universal prop, on native the microphone is only used when recording videos.\n    // Because we don't support recording video in the browser we don't need the user to give microphone permissions.\n    const isMuted = true;\n\n    const style = React.useMemo<StyleProp<ViewStyle>>(() => {\n      const isFrontFacingCamera = native.type === CameraManager.Type.front;\n      return [\n        StyleSheet.absoluteFill,\n        styles.video,\n        {\n          // Flip the camera\n          transform: isFrontFacingCamera ? [{ scaleX: -1 }] : undefined,\n        },\n      ];\n    }, [native.type]);\n\n    return (\n      <View pointerEvents=\"box-none\" style={[styles.videoWrapper, props.style]}>\n        <Video\n          autoPlay\n          playsInline\n          muted={isMuted}\n          poster={poster}\n          // webkitPlaysinline\n          pointerEvents={props.pointerEvents}\n          ref={video}\n          style={style}\n        />\n        {props.children}\n      </View>\n    );\n  }\n);\n\nexport default ExponentCamera;\n\nconst Video = React.forwardRef(\n  (\n    props: React.ComponentProps<typeof View> & {\n      autoPlay?: boolean;\n      playsInline?: boolean;\n      muted?: boolean;\n      poster?: string;\n    },\n    ref: React.Ref<HTMLVideoElement>\n  ) => createElement('video', { ...props, ref })\n);\n\nconst styles = StyleSheet.create({\n  videoWrapper: {\n    flex: 1,\n    alignItems: 'stretch',\n  },\n  video: {\n    width: '100%',\n    height: '100%',\n    objectFit: 'cover',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}